From 1 to 100
=============

Source: http://pyvideo.org/pycon-za-2017/growing-pains-scaling-a-django-project-and-team.html


Scaling code
------------
=> A fight against complexity.

At a certain point the code base does not find
anymore into one person's head. Complexity removes
all your velocity.

**Abstraction**: Reduce the size of any single component
and create a set of subsystems allowing specialization
where necessary. Those subsystems need to be glued 
together=> A fight against complexity.

At a certain point the code base does not find
anymore into one person's head. Complexity removes
all your velocity.

**How to abstract?**: 

* Monolith
* Modules define public APIs via __init__.py
* Shared modules using git submodules
* Shared libraries using PyPI
* Service oriented architecture

**Design to be changed**
Your architecture is never finished and fixed.

**Clean all the things**

* Rule: Always leave code cleaner than when you found it.
* Flake CI
* Conduct refactorathons
* Ressource tech debt


**Review all the things**

* Code review is critical
* Conduct 10% design reviews 


Growth and Infrastructure: Fighting scale
-----------------------------------------

- Webserver: Nginx
- App: Django + Gunicorn
- DB: PostgreSQL

The site is getting slow. We have to improve


- Cache: Redis
- Background Processing: Celery
- Task Queue: RabbitMQ

The machines can't keep up with the load:

* Workers: Multiple Django Workers
* Replicas: Read-Replicas

Reports are getting slow:

* Data Warehouse: Elastic Search (bad for primary data)
* Stream Processing: Kafka (Streaming Plattform)

Type of data in database:

* Binary DB data: riak ("blob" database)

Data does not fit into your PostgreSQL table anymore:
=> Interesting question: What should we do if a table is too big?


**Important:** 

- Build DevOps capacity
* Get to know your tools well! Really well!
* Monitor all the things (update, servers with Datadog + Pingdom)
* Record all the things (logs, ELK, datatig)
* Orchestrate all the things (Ansible, Salt etc)


Scaling your stack
------------------
